// Code generated by MockGen. DO NOT EDIT.
// Source: domain/wager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	domain "test-wage/domain"

	gomock "github.com/golang/mock/gomock"
)

// MockWagerService is a mock of WagerService interface.
type MockWagerService struct {
	ctrl     *gomock.Controller
	recorder *MockWagerServiceMockRecorder
}

// MockWagerServiceMockRecorder is the mock recorder for MockWagerService.
type MockWagerServiceMockRecorder struct {
	mock *MockWagerService
}

// NewMockWagerService creates a new mock instance.
func NewMockWagerService(ctrl *gomock.Controller) *MockWagerService {
	mock := &MockWagerService{ctrl: ctrl}
	mock.recorder = &MockWagerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWagerService) EXPECT() *MockWagerServiceMockRecorder {
	return m.recorder
}

// BuyWager mocks base method.
func (m *MockWagerService) BuyWager(wagerID uint, req domain.BuyWagerReq) (domain.BuyWager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyWager", wagerID, req)
	ret0, _ := ret[0].(domain.BuyWager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuyWager indicates an expected call of BuyWager.
func (mr *MockWagerServiceMockRecorder) BuyWager(wagerID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyWager", reflect.TypeOf((*MockWagerService)(nil).BuyWager), wagerID, req)
}

// ListWagers mocks base method.
func (m *MockWagerService) ListWagers(pageInfo domain.PageInfo) ([]domain.Wager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWagers", pageInfo)
	ret0, _ := ret[0].([]domain.Wager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWagers indicates an expected call of ListWagers.
func (mr *MockWagerServiceMockRecorder) ListWagers(pageInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWagers", reflect.TypeOf((*MockWagerService)(nil).ListWagers), pageInfo)
}

// PlaceWager mocks base method.
func (m *MockWagerService) PlaceWager(req domain.PlaceWagerReq) (domain.Wager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlaceWager", req)
	ret0, _ := ret[0].(domain.Wager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlaceWager indicates an expected call of PlaceWager.
func (mr *MockWagerServiceMockRecorder) PlaceWager(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlaceWager", reflect.TypeOf((*MockWagerService)(nil).PlaceWager), req)
}

// MockWagerRepo is a mock of WagerRepo interface.
type MockWagerRepo struct {
	ctrl     *gomock.Controller
	recorder *MockWagerRepoMockRecorder
}

// MockWagerRepoMockRecorder is the mock recorder for MockWagerRepo.
type MockWagerRepoMockRecorder struct {
	mock *MockWagerRepo
}

// NewMockWagerRepo creates a new mock instance.
func NewMockWagerRepo(ctrl *gomock.Controller) *MockWagerRepo {
	mock := &MockWagerRepo{ctrl: ctrl}
	mock.recorder = &MockWagerRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWagerRepo) EXPECT() *MockWagerRepoMockRecorder {
	return m.recorder
}

// BuyWager mocks base method.
func (m *MockWagerRepo) BuyWager(wagerID uint, req domain.BuyWagerReq) (domain.BuyWager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyWager", wagerID, req)
	ret0, _ := ret[0].(domain.BuyWager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuyWager indicates an expected call of BuyWager.
func (mr *MockWagerRepoMockRecorder) BuyWager(wagerID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyWager", reflect.TypeOf((*MockWagerRepo)(nil).BuyWager), wagerID, req)
}

// ListWagers mocks base method.
func (m *MockWagerRepo) ListWagers(pageInfo domain.PageInfo) ([]domain.Wager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWagers", pageInfo)
	ret0, _ := ret[0].([]domain.Wager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWagers indicates an expected call of ListWagers.
func (mr *MockWagerRepoMockRecorder) ListWagers(pageInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWagers", reflect.TypeOf((*MockWagerRepo)(nil).ListWagers), pageInfo)
}

// PlaceWager mocks base method.
func (m *MockWagerRepo) PlaceWager(req domain.PlaceWagerReq) (domain.Wager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlaceWager", req)
	ret0, _ := ret[0].(domain.Wager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlaceWager indicates an expected call of PlaceWager.
func (mr *MockWagerRepoMockRecorder) PlaceWager(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlaceWager", reflect.TypeOf((*MockWagerRepo)(nil).PlaceWager), req)
}
